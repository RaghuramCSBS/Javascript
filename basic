
js is single threaded,loosely typed(no need to specify data type when declearing variable) and synchronous language
js have a execution context with consist of 2 components:
1)memory 2)code
js run code in 2 phase:
1)memory creation 2)thread of execution

In memory creation phase variable are assigned with a keyword undifined and function as stored as funtions in key:value style
in thread of execution js assign value to variable which holding undine and execute logic in case of function its creates another execution context


Hoisting:
it is a feature in js where we can access variables and function even before inisialition
order of execution is maintained by a stack called call stack

Window object:
in js window object is created along with global execution context what ever we define in global space they will be attached to window object

global space:
anything outside any function is global space

Notdefine vs Undefine:

Notdefine meaning no such variable defined in code
undefine meaning variable defined but not inisialised

Lexical environment:

lexical meaning herierical, lexical environment meaning local memory + lexical environment of parent.
function can access variables in global space because first it search in local memory then its parents lexical environmrnt(global space in this case).
eg:-

let a=10;
fuction c(){
console.log(a);
}

let vs const vs var:

let vs const stores in diff space than var, var stores values in global space. here hoisting done on 3, but let and const can't be accessed before like var this effect is called temporal deadzone.
temporal deadzone: time gap between variable declearation and value inisialization.
let and const variables can't be redecleared but var can.

let vs const:

const is strict than let:

eg: let c; error   ------------------------------------because when using const declearation and inisialization need to done at sametime but let can
    let c=10; right




